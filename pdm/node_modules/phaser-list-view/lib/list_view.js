'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _list_view_core = require('./list_view_core');

var _list_view_core2 = _interopRequireDefault(_list_view_core);

var _directional_scroller = require('./directional_scroller');

var _directional_scroller2 = _interopRequireDefault(_directional_scroller);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultOptions = {
  direction: 'y',
  autocull: true,
  momentum: true,
  bouncing: true,
  snapping: false,
  overflow: 100,
  padding: 10,
  searchForClicks: false // if you just click on the list view it will search the list view items for onInputDown and onInputUp events.
};

var ListView = function (_ListViewCore) {
  _inherits(ListView, _ListViewCore);

  function ListView(game, parent, bounds) {
    var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

    _classCallCheck(this, ListView);

    // we have to use a new mask instance for the click object or webgl ignores the mask
    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ListView).call(this, game, parent, (0, _util.parseBounds)(bounds), Object.assign({}, defaultOptions, options)));

    _this.scroller = new _directional_scroller2.default(_this.game, _this._addMask(bounds), Object.assign({
      from: 0,
      to: 0
    }, _this.options));
    _this.scroller.events.onUpdate.add(function (o) {
      _this._setPosition(o.total);
    });
    _this.events.onAdded.add(function (limit) {
      var _to = Math.min(-limit, 0);
      _this.scroller.setFromTo(0, _to);
      if (_this.options.searchForClicks) {
        _this.scroller.registerClickables(_this.items);
      }
    });
    return _this;
  }

  _createClass(ListView, [{
    key: 'destroy',
    value: function destroy() {
      this.scroller.destroy();
      this.scroller = null;
      _get(Object.getPrototypeOf(ListView.prototype), 'destroy', this).call(this);
    }
  }, {
    key: 'reset',
    value: function reset() {
      this._setPosition(0);
      this.scroller.reset();
    }
  }]);

  return ListView;
}(_list_view_core2.default);

exports.default = ListView;