'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _math_utils = require('./utils/math_utils');

var _math_utils2 = _interopRequireDefault(_math_utils);

var _scroller = require('./scroller');

var _scroller2 = _interopRequireDefault(_scroller);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Phaser$Math = Phaser.Math;
var radToDeg = _Phaser$Math.radToDeg;
var degToRad = _Phaser$Math.degToRad;

var _ptHelper = new Phaser.Point();

var defaultOptions = {
  direction: 'angle',
  infinite: false,
  speedLimit: 1.5
};

var WheelScroller = function (_Scroller) {
  _inherits(WheelScroller, _Scroller);

  function WheelScroller(game, clickObject) {
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    _classCallCheck(this, WheelScroller);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(WheelScroller).call(this, game, clickObject, { angle: clickObject.width / 2 }, Object.assign({}, defaultOptions, options)));
  }

  // extends Scroller.handleDown


  _createClass(WheelScroller, [{
    key: 'handleDown',
    value: function handleDown(target, pointer) {
      if (!this.enabled) return;
      this.centerPoint = this.clickObject.toGlobal(new Phaser.Point(0, 0));
      _ptHelper.set(pointer.x, pointer.y);
      this.old = this.down = Phaser.Math.normalizeAngle(Phaser.Math.angleBetweenPoints(_ptHelper, this.centerPoint));
      this.fullDiff = 0;

      _get(Object.getPrototypeOf(WheelScroller.prototype), 'handleDown', this).call(this, target, pointer);
    }

    // overrides Scroller.handleMove

  }, {
    key: 'handleMove',
    value: function handleMove(pointer, x, y) {
      if (!this.enabled) return;
      this.isScrolling = true;
      _ptHelper.set(x, y);
      var currentRotation = Phaser.Math.normalizeAngle(Phaser.Math.angleBetweenPoints(_ptHelper, this.centerPoint));
      var rotations = 0;

      var diffRotation = this.old - currentRotation;
      this.diff = radToDeg(diffRotation);

      if (this.diff > 180) {
        rotations = 1;
      } else if (this.diff < -180) {
        rotations = -1;
      }

      if (rotations != 0) {
        var fullCircle = rotations * degToRad(360);
        diffRotation -= fullCircle;
        this.diff = radToDeg(diffRotation);
      }

      this.diff = this._requestDiff(this.diff, this.target, this.min, this.max, this.o.overflow);

      this.fullDiff -= this.diff;

      this.target -= this.diff;

      if (this.o.infinite) {
        this.target = this._wrapTarget(this.target, this.min, this.max);
      }

      this.old = currentRotation;

      //store timestamp for event
      this.o.time.move = this.game.time.time;

      var diameter = this.clickObject.width;
      var circumference = Math.PI * diameter;
      var sectorLength = circumference * (this.diff / 360);
      this.acc = Math.min(Math.abs(sectorLength / 30), this.o.maxAcceleration);

      //go ahead and move the block
      this.scrollObject[this.o.direction] = this.target;
      this.handleUpdate();

      if (this.o.emitMoving) this.events.onInputMove.dispatch({ pointer: pointer, x: x, y: y });
    }

    // extends Scroller.handleDown

  }, {
    key: 'handleUp',
    value: function handleUp(target, pointer) {
      _ptHelper.set(pointer.x, pointer.y);
      this.current = Phaser.Math.normalizeAngle(Phaser.Math.angleBetweenPoints(_ptHelper, this.centerPoint));

      _get(Object.getPrototypeOf(WheelScroller.prototype), 'handleUp', this).call(this, target, pointer);
    }
  }, {
    key: '_wrapTarget',
    value: function _wrapTarget(target, min, max) {
      var diff = 0;
      if (target > max) {
        diff = target - max;
        target = min + diff;
      } else if (target < min) {
        diff = min - target;
        target = max - diff;
      }
      return target;
    }
  }]);

  return WheelScroller;
}(_scroller2.default);

exports.default = WheelScroller;