'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _game_state = require('./states/game_state');

var _game_state2 = _interopRequireDefault(_game_state);

var _boot = require('./states/boot');

var _boot2 = _interopRequireDefault(_boot);

var _list_view_state = require('./states/list_view_state');

var _list_view_state2 = _interopRequireDefault(_list_view_state);

var _swipe_carousel_state = require('./states/swipe_carousel_state');

var _swipe_carousel_state2 = _interopRequireDefault(_swipe_carousel_state);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Game = function (_Phaser$Game) {
  _inherits(Game, _Phaser$Game);

  function Game() {
    _classCallCheck(this, Game);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Game).apply(this, arguments));
  }

  _createClass(Game, [{
    key: 'setupStage',
    value: function setupStage() {
      this.input.maxPointers = 1;
      this.scale.scaleMode = Phaser.ScaleManager.USER_SCALE;
      this.scale.setMinMax(this.width / 2, this.height / 2, this.width, this.height);
      // this.scale.forceOrientation(true) // landscape
      this.scale.pageAlignHorizontally = true;

      // if (this.device.desktop) {
      //   this.scale.setResizeCallback(this.fitToWindow, this)
      // } else {
      //   // Mobile
      //   this.scale.setResizeCallback(this.fitToWindowMobile, this)
      // }
    }
  }, {
    key: 'fitToWindowMobile',
    value: function fitToWindowMobile() {
      var gameHeight = this.height;
      var windowAspectRatio = window.innerWidth / window.innerHeight;
      var gameWidth = Math.ceil(this.height * windowAspectRatio);
      this.scale.setGameSize(gameWidth, gameHeight);
      this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
    }
  }, {
    key: 'fitToWindow',
    value: function fitToWindow() {
      var w = window.innerWidth / this.width;
      var h = window.innerHeight / this.height;
      var scale = Math.min(w, h);
      this.scale.setUserScale(scale, scale);
    }
  }, {
    key: 'addStates',
    value: function addStates() {
      var _this2 = this;

      this.states.forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var name = _ref2[0];
        var stateClass = _ref2[1];

        _this2.state.add(name, stateClass);
      });
    }
  }, {
    key: 'startGame',
    value: function startGame() {
      console.log('start game');
      this.stateIndex = 0;
      this.nextState();
    }
  }, {
    key: 'nextState',
    value: function nextState() {
      this.gotoStateByIndex(this.stateIndex + 1);
    }
  }, {
    key: 'prevState',
    value: function prevState() {
      this.gotoStateByIndex(this.stateIndex - 1);
    }
  }, {
    key: 'gotoStateByIndex',
    value: function gotoStateByIndex(index) {
      index = Math.min(index, this.states.length - 1);
      index = Math.max(index, 1);
      this.stateIndex = index;
      this.state.start(this.states[index][0]);
    }
  }, {
    key: 'addDropDownMenu',
    value: function addDropDownMenu() {
      var _this3 = this;

      this.experiments.forEach(function (a) {
        var _a = _slicedToArray(a, 2);

        var name = _a[0];
        var klass = _a[1];


        var option = document.createElement('option');
        option.text = name;
        document.getElementById('selector').add(option);
      });

      document.getElementById('selector').addEventListener('change', function (e) {
        _this3.state.start(e.target.value);
      });
    }
  }]);

  return Game;
}(Phaser.Game);

Game.prototype.experiments = [['ListView Example', _list_view_state2.default], ['SwipeCarousel Example', _swipe_carousel_state2.default]];

Game.prototype.states = [['boot', _boot2.default]].concat(Game.prototype.experiments);

exports.default = Game;